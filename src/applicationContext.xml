<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">
	
	<!-- c3p0 整合到Spring -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 1.指定c3p0连接池的配置文件的位置 -->
	<context:property-placeholder location="classpath:/db.properties"/>
	
	<!-- 2.c3p0连接池的配置和注入Spring容器 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 如果有对应的配置文件就不需要以下的属性注入（下面使用的是set属性注入） -->
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>	
	
	<!-- 3.将c3p0连接池注入到hibernate中，使得hibernate从连接池获得session连接 -->
	
		
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
	
	
	<!-- 事务管理 -->	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 核心事务管理器 -->	
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- xml配置 -->
	<!-- ========================================================= -->
	<!-- 通知配置 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="updata*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
			<tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
	<!-- 织入 -->
	<!-- <aop:config>
		<aop:pointcut expression="execution(* com.jz.service.impl.*ServiceImpl.*(..))" id="txPc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
	</aop:config> -->
	<!-- ========================================================= -->
	
	
	<!-- 注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
	
	
	
	
	<!-- Hibernate整合到Spring -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 加载配置 方案一：仍然使用外部hibernate.cfg.xml配置信息
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean>
	 -->
	 
	 
	<!-- 加载配置 方案二：在Spring配置中放置hibernate配置信息-->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		
		<!-- 将连接池注入sessionFactory -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置hibernate基本信息 -->
		<property name="hibernateProperties">
			<props>
				<!-- 必选配置 -->
				<!-- <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql:///ssh_crm</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">root123</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 可选配置 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 引入orm元数据 
		mappingDirectoryLocations 引入配置文件目录
		-->
		<property name="mappingDirectoryLocations" value="classpath:com/jz/domain"></property>
	</bean>
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
	
	
	
	
	
	<!-- 整合Struts到Spring -->
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- 方案一：
			<bean name="userAction" class="com.jz.web.action.UserAction" scope="prototype"></bean>
			Spring自动封装依赖属性（根据userAction中依赖的名称，在Spring容器中寻找相同的名字，进行注入）
	 -->
	 
	 <!-- 方案二：Spring创建action，并且需要手动注入属性依赖 -->
	<bean name="userAction" class="com.jz.web.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	<bean name="userService" class="com.jz.service.impl.UserServiceImpl">
		<property name="ud" ref="userDao"></property>
	</bean>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	
	<bean name="userDao" class="com.jz.dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	
	
	
	
	
	<!-- 关于Customer的类的配置 -->
	
	<bean name="customerAction" class="com.jz.web.action.CustomerAction" scope="prototype"><!-- 多例 -->
		<property name="cs" ref="customerService"></property>
	</bean>
	<bean name="customerService" class="com.jz.service.impl.CustomerServiceImpl">
		<property name="cd" ref="customerDao"></property>
	</bean>
	<bean name="customerDao" class="com.jz.dao.impl.CustomerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
</beans>